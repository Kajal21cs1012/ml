import pandas as pd
import numpy as np
import tensorflow
from keras.preprocessing.image import load_img
img1 = load_img("C:/Users/kajal/OneDrive/Desktop/Machine Learning/v_data/train/cars/1.jpg")
img2 = load_img("C:/Users/kajal/OneDrive/Desktop/Machine Learning/v_data/train/cars/2.jpg")
img1.size
i=np.array(img1)
i
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
img_width = 224
img_height = 224
train_data = "v_data/train"
test_data = "v_data/test"
train_samples = 400
test_samples = 100
input_shape = (img_width, img_height,3)
model = Sequential()
model.add(Conv2D(32,(2,2),input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(32,(2,2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Conv2D(64,(2,2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2)))


model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))
model.summary()
model.compile(loss = 'binary_crossentropy',
             optimizer = 'rmsprop',
             metrics=['accuracy'])
train_data = ImageDataGenerator(rescale=1. /255)
test_data = ImageDataGenerator(rescale=1. /255)
train_data_load = train_data.flow_from_directory(
                    'v_data/train/',
                    target_size=(img_width,img_height),
                    batch_size=20,
                    class_mode='binary')
test_data_load = test_data.flow_from_directory(
                    'v_data/test/',
                    target_size=(img_width,img_height),
                    batch_size=20,
                    class_mode='binary')
model.fit(train_data_load, epochs=5, validation_data=test_data_load)
i=np.array(img1)
i.shape
i=i.reshape(1,224,224,3)
model.predict(i)























